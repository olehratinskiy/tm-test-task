AWSTemplateFormatVersion: 2010-09-09
Resources:
  TaskVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TaskVPC

  TaskSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.0.0/28
      MapPublicIpOnLaunch: true
      VpcId: !Ref TaskVPC
      Tags:
        - Key: Name
          Value: TaskSubnetA

  TaskSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.0.16/28
      MapPublicIpOnLaunch: true
      VpcId: !Ref TaskVPC
      Tags:
        - Key: Name
          Value: TaskSubnetB

  TaskRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TaskVPC
      Tags:
        - Key: Name
          Value: TaskRouteTable

  TaskIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TaskIGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref TaskIGW
      VpcId: !Ref TaskVPC

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref TaskRouteTable
      SubnetId: !Ref TaskSubnetA

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref TaskRouteTable
      SubnetId: !Ref TaskSubnetB

  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref TaskIGW
      RouteTableId: !Ref TaskRouteTable
      DestinationCidrBlock: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows input 80 port and output everything
      VpcId: !Ref TaskVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows input 80 port from ALB and output everything
      VpcId: !Ref TaskVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ECSSecurityGroup

  EFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows input 2049 port and output everything
      VpcId: !Ref TaskVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: EFSSecurityGroup

  WebPageEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: true
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: tm-devops-trainee-efs

  MountTargetSubnetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WebPageEFS
      SubnetId: !Ref TaskSubnetA
      SecurityGroups:
        - !Ref EFSSecurityGroup

  MountTargetSubnetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref WebPageEFS
      SubnetId: !Ref TaskSubnetB
      SecurityGroups:
        - !Ref EFSSecurityGroup

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: TaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref TaskRole

  TmpEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-079db87dc4c10ac91
      InstanceType: t2.micro
      KeyName: main
      SubnetId: !Ref TaskSubnetA
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref ECSSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${WebPageEFS}.efs.us-east-1.amazonaws.com:/ /mnt > /home/ec2-user/log_1.txt 2>&1
          sleep 10

          sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${WebPageEFS}.efs.us-east-1.amazonaws.com:/ /mnt > /home/ec2-user/log_2.txt 2>&1
          cd /mnt
          sudo touch index.html
          sudo bash -c 'echo "
          <!DOCTYPE html>
          <html lang=\"en\">
              <head>
                  <meta charset=\"UTF-8\">
                  <title>Test Page</title>
              </head>
              <body>
                  <h1> Hello, Techmagic! </h1>
              </body>
          </html>" > index.html'

  WebPageALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: tm-devops-trainee-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref TaskSubnetA
        - !Ref TaskSubnetB

  WebPageTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: WebPageALB
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name: WebPageTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref TaskVPC

  WebPageListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebPageTargetGroup
      LoadBalancerArn: !Ref WebPageALB
      Port: 80
      Protocol: HTTP

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT

  WebPageTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      Family: WebPageTaskDefinition
      ContainerDefinitions:
        - Name: nginx
          MountPoints:
            - SourceVolume: static-volume
              ContainerPath: /usr/share/nginx/html
              ReadOnly: false
          Image: nginx:latest
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Essential: true
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Volumes:
        - Name: static-volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref WebPageEFS
            RootDirectory: /

  WebPageService:
    Type: AWS::ECS::Service
    DependsOn: WebPageListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref TaskSubnetA
            - !Ref TaskSubnetB
      ServiceName: WebPageService
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref WebPageTargetGroup
      TaskDefinition: !Ref WebPageTaskDefinition



